using GrpcService2.Services; // Change namespace for each service

var builder = WebApplication.CreateBuilder(args);

// Configure logging with colors and formatting
builder.Logging.ClearProviders();
builder.Logging.AddConsole(options =>
{
    options.FormatterName = "simple";
});
builder.Logging.SetMinimumLevel(LogLevel.Information);

// Add services to the container
builder.Services.AddGrpc();

var app = builder.Build();

// Log startup information
var logger = app.Services.GetRequiredService<ILogger<Program>>();
var serverName = builder.Configuration["ServerName"] ?? "Server";
var port = builder.Configuration["Kestrel:Endpoints:Http:Url"] ?? "Unknown";

logger.LogInformation("??????????????????????????????????????????????????????");
logger.LogInformation($"? ?? {serverName} INITIALIZING");
logger.LogInformation($"? ?? Listening on: {port}");
logger.LogInformation($"? ?? Protocol: HTTP/2 (gRPC)");
logger.LogInformation($"? ? Started at: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
logger.LogInformation("??????????????????????????????????????????????????????");
logger.LogInformation("");

// Configure the HTTP request pipeline
app.MapGrpcService<CalculatorService>();
app.MapGet("/", () => "Communication with gRPC endpoints must be made through a gRPC client.");

app.Lifetime.ApplicationStopping.Register(() =>
{
    logger.LogInformation("??????????????????????????????????????????????????????");
    logger.LogInformation($"? ?? {serverName} SHUTTING DOWN");
    logger.LogInformation($"? ? Time: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
    logger.LogInformation("??????????????????????????????????????????????????????");
});

app.Run();